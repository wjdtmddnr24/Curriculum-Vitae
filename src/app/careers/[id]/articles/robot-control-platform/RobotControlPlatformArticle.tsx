import Article from "@components/article/Article";
import NotFinishedNotification from "@components/article/NotFinishedNotification";
import Badges from "@components/article/header/Badges";

const { Header, Footer, Paragraph, Image, Heading } = Article;
const { Title, SubTitle } = Header;

function RobotControlPlatformArticle() {
  return (
    <Article>
      <Header>
        <NotFinishedNotification className="my-4" />
        <Title>로봇 관제 플랫폼 설계 및 개발</Title>
        <SubTitle>프리랜서 근무</SubTitle>
        <Badges badges={["Kubernetes", "Nest.js", "AWS Lambda", "WebSocket", "Redis", "Next.js"]} />
      </Header>

      <Heading>작업의 시작</Heading>
      <Paragraph>
        23년 10월 초에 공군 전역을 하고, 전에 강사로 근무했던 학원의 원장님께 안부차 연락을 드렸는데 학원에서 새로운
        사업을 진행하고 있다는 소식을 들었다. 무슨 사업을 진행하고 있는지 물어보니 로봇 연구소와 협력하여 로봇을
        개발하고 있고, 이 로봇들을 학원에서 운영하는 내부 서비스와 연동을 하거나 타업체 혹은 공기관에서 로봇을 이용한
        서비스 개발을 의뢰하면 로봇과 소프트웨어를 개발해서 납품을 하는 사업을 준비하고 있다고 하셨다.
        <br />
        <br />
        하지만 아직 사업 초기 단계여서 로봇 하드웨어 개발 외에는 내부적인 기능이나 인프라, 서버개발 등을 할 인력을
        확보하지 못한 상황이고 개발자를 고용해서 진행을 할지, 외주업체에 의뢰를 할지 고민하고 있어, 내게 사업의 전반적인
        기술적 자문과 작업 진행에 도움을 요청하셨고 이렇게 작업을 진행하게 되었었다.
        <br />
        <br />
        사업을 도와주기로 시작한 뒤 가장 먼저 진행한 일은 개발 업무 내에서의 관심사 분리였다. 로봇 하드웨어 개발은 로봇
        연구소에서 진행하기 때문에 학원측 사업의 작업 영역은 하드웨어 이외의 모든 부분이었다. 즉, 로봇의 서버연동이나
        로봇을 이용한 서비스 개발 등의 영역은 우리가 진행해야 한다는 뜻이었다. 로봇의 서버연동이나 서비스 개발을 하나의
        서비스 묶어 개발을 진행하면 두부분이 긴밀하게 엮여, 추후 로봇을 이용한 새로운 서비스를 개발할 때 다시 로봇의
        연동부터 시작해야하기 때문에 로봇의 관제와 로봇을 이용한 서비스, 이 두 영역으로 분리하여 개발을 진행하기로
        하였다. 이렇게 하면 로봇 관제 플랫폼을 먼저 설계하고 구축하고, 이후에 이 관제 플랫폼 위에 로봇을 이용한
        서비스들을 개발할 수 있기 때문이었다.
        <br />
        <br />
        이렇게 로봇의 관제 플랫폼을 먼저 개발하게 되었고, 개발자를 고용하거나 외주업체를 찾기 전까지 이 로봇 관제
        플랫폼의 설계와 초기 개발을 진행하게 되었다.
      </Paragraph>

      <Heading>로봇 관제 플랫폼의 요구사항</Heading>
      <Paragraph>
        로봇 관제 플랫폼 개발을 맡게 되었지만 막상 시작하려고 하니 이 작업을 어디서 어디까지 진행해야 하고 어떤 기능들을
        개발해야할지 정리가 되지 않았다. 그래서 먼저 로봇 관제 플랫폼의 요구사항들을 원장님과 연구원분들과 논의를 하여
        정리를 했다.
        <br />
        <br />
        로봇 관제 플랫폼의 기능적인 요구사항은 다음과 같았다:
        <br />
        <br />
        <b>1. 로봇 개체 구성 설정</b>
        <br />
        로봇이 어느 조직, 어느 위치에 할당되는지 설정할 수 있어야 하며, 로봇에게 초기 위치나 지리 데이터(지도)를 주입할
        수 있어야 한다. 또한 로봇의 논리적인 개체 정보와 물리적인 로봇 개체의 매핑을 할 수 있어야 한다.
        <br />
        <br />
        <b>2. 로봇 모니터링</b>
        <br />
        로봇의 연결 상태, 현재 위치, 작업 상태 등을 실시간으로 모니터링 할 수 있어야 한다.
        <br />
        <br />
        <b>3. 작업 가능한 로봇의 탐색</b>
        <br />
        작업 대기중인 로봇(or 우선순위가 낮은 작업을 진행중인 로봇), 물리적으로 작업을 수행해야할 공간에 이동할 수 있는
        로봇을 탐색할 수 있어야 한다.
        <br />
        <br />
        <b>4. 로봇 이동 및 작업 명령</b>
        <br />
        안드로이드 OS로 동작하는 2D LiDAR 및 SLAM 기반 이동 로봇을 사용한다. 로봇에게 X, Y, Angle 지점으로 이동 및
        회전하라는 명령을 내릴 수 있어야 하며, 작업 가능한 로봇을 탐색하여 해당 로봇에게 작업을 할당할 수 있어야 한다.
        외부 서비스로부터 로봇 작업 요청이 들어오면, 작업 가능 로봇에게 작업을 할당하고 로봇에게 이동명령을 내린 뒤,
        작업을 수행하도록 해야한다.
        <br />
        <br />
        이러한 요구사항 외에 로봇 관제 플랫폼을 설계하고 개발하면서 염두하고 진행해야하는 항목들이 있었다. 한번에
        수천/수만대의 로봇들을 관제할 수 있어야 한다는 점. 개발자가 확정되지 않아 추후 최종적으로 어느 언어, 런타임
        환경으로 관제 플랫폼과 서비스 개발을 진행하게 될지 모른다는 점 등이었다.
      </Paragraph>

      <Footer>Last Update: 2024-04-28</Footer>
    </Article>
  );
}

export default RobotControlPlatformArticle;
